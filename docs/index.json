[{"categories":["操作系统"],"content":"This post shows the common ways in which the firewalld command is used. ","date":"2022-07-16","objectID":"/firewalld-usage/:0:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#"},{"categories":["操作系统"],"content":"Introduction to firewalld The dynamic firewall daemon firewalld provides a dynamically managed firewall with support for network “zones” to assign a level of trust to a network and its associated connections and interfaces. It has support for IPv4 and IPv6 firewall settings. It supports Ethernet bridges and has a separation of runtime and permanent configuration options. It also has an interface for services or applications to add firewall rules directly. ","date":"2022-07-16","objectID":"/firewalld-usage/:1:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#introduction-to-firewalld"},{"categories":["操作系统"],"content":"Understanding firewalld firewall-config is a graphical configuration tool that is used to configure firewalld. The firewall service provided by firewalld is dynamic rather than static because changes to the configuration can be made at anytime and are immediately implemented, there is no need to save or apply the changes. No unintended disruption of existing network connections occurs as no part of the firewall has to be reloaded. firewall-cmd is a command line client for firewalld. ","date":"2022-07-16","objectID":"/firewalld-usage/:2:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#understanding-firewalld"},{"categories":["操作系统"],"content":"Comparison of firewalld to system-config-firewall and iptables The essential differences between firewalld and the iptables service are: The iptables service stores configuration in /etc/sysconfig/iptables while firewalld stores it in various XML files in /usr/lib/firewalld/ and /etc/firewalld/. Note that the /etc/sysconfig/iptables file does not exist as firewalld is installed by default on Red Hat Enterprise Linux. With the iptables service, every single change means flushing all the old rules and reading all the new rules from /etc/sysconfig/iptables while with firewalld there is no re-creating of all the rules; only the differences are applied. Consequently, firewalld can change the settings during runtime without existing connections being lost. Both use iptables tool to talk to the kernel packet filter. The Firewall StackThe Firewall Stack \" The Firewall Stack ","date":"2022-07-16","objectID":"/firewalld-usage/:3:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#comparison-of-firewalld-to-system-config-firewall-and-iptables"},{"categories":["操作系统"],"content":"Understanding Network Zones Firewalls can be used to separate networks into different zones based on the level of trust the user has decided to place on the devices and traffic within that network. NetworkManager informs firewalld to which zone an interface belongs. An interface’s assigned zone can be changed by NetworkManager or via the firewall-config tool which can open the relevant NetworkManager window for you. The zone settings in /etc/firewalld/ are a range of preset settings which can be quickly applied to a network interface. They are listed here with a brief explanation: drop Any incoming network packets are dropped, there is no reply. Only outgoing network connections are possible. block Any incoming network connections are rejected with an icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited for IPv6. Only network connections initiated from within the system are possible. public For use in public areas. You do not trust the other computers on the network to not harm your computer. Only selected incoming connections are accepted. external For use on external networks with masquerading enabled especially for routers. You do not trust the other computers on the network to not harm your computer. Only selected incoming connections are accepted. dmz For computers in your demilitarized zone that are publicly-accessible with limited access to your internal network. Only selected incoming connections are accepted. 关于 DMZ，更好的解释请看 鸟哥的私房菜-防火墙的一般网络布线示意 work For use in work areas. You mostly trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted. home For use in home areas. You mostly trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted. internal For use on internal networks. You mostly trust the other computers on the networks to not harm your computer. Only selected incoming connections are accepted. trusted All network connections are accepted. It is possible to designate one of these zones to be the default zone. When interface connections are added to NetworkManager, they are assigned to the default zone. On installation, the default zone in firewalld is set to be the public zone. ","date":"2022-07-16","objectID":"/firewalld-usage/:4:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#understanding-network-zones"},{"categories":["操作系统"],"content":"Choosing a Network Zone The network zone names have been chosen to be self-explanatory and to allow users to quickly make a reasonable decision. However, a review of the default configuration settings should be made and unnecessary services disabled according to your needs and risk assessments. ","date":"2022-07-16","objectID":"/firewalld-usage/:5:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#choosing-a-network-zone"},{"categories":["操作系统"],"content":"Understanding Predefined Services A service can be a list of local ports and destinations as well as a list of firewall helper modules automatically loaded if a service is enabled. The use of predefined services makes it easier for the user to enable and disable access to a service. The services are specified by means of individual XML configuration files which are named in the following format: service-name.xml. List the default predefined services available: \u003e ls /usr/lib/firewalld/services/ 注意 Files in /usr/lib/firewalld/services/ must not be edited. Only the files in /etc/firewalld/services/ should be edited. List the system or user created services: \u003e ls /etc/firewalld/services/ Add or change a service: # Use files in /usr/lib/firewalld/services/ as templates \u003e cp /usr/lib/firewalld/services/[service].xml /etc/firewalld/services/[service].xml firewalld will prefer files in /etc/firewalld/services/ but will fall back to /usr/lib/firewalld/services/ should a file be deleted, but only after a reload. ","date":"2022-07-16","objectID":"/firewalld-usage/:6:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#understanding-predefined-services"},{"categories":["操作系统"],"content":"Understanding the Direct Interface firewalld has a so called “direct interface”, which enables directly passing rules to iptables, ip6tables and ebtables. It is intended for use by applications and not users. The direct interface mode is intended for services or applications to add specific firewall rules during runtime. \u003e firewall-cmd --direct ... ","date":"2022-07-16","objectID":"/firewalld-usage/:7:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#understanding-the-direct-interface"},{"categories":["操作系统"],"content":"Using the iptables Service Use the iptables and ip6tables services instead of firewalld. # Disable firewalld \u003e systemctl disable firewalld \u003e systemctl stop firewalld # Package iptables-services contains iptables and ip6tables service \u003e yum install iptables-services \u003e systemctl start iptables \u003e systemctl start ip6tables \u003e systemctl enable iptables \u003e systemctl enable ip6tables ","date":"2022-07-16","objectID":"/firewalld-usage/:8:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#using-the-iptables-service"},{"categories":["操作系统"],"content":"Configuring Firewall Using firewall-cmd Check firewall-cmd version: \u003e firewall-cmd --version View help: \u003e firewall-cmd --help 为了让所做的设置永久生效，需要给 除添加有 –direct 选项的命令之外的 所有命令添加 –permanent。若无，则设置仅在下一次 firewall-cmd –reload、system boot、firewalld service restart之前有效。reloading firewall本身并不会破坏已有网络连接，但请注意这样做会丢弃已做出的短暂的设置修改。 ","date":"2022-07-16","objectID":"/firewalld-usage/:9:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#configuring-firewall-using-firewall-cmd"},{"categories":["操作系统"],"content":"View the Firewall Settings Using CLI Check the state of firewalld: \u003e firewall-cmd --state View the list of active zones, with a list of the interfaces currently assigned to them: \u003e firewall-cmd --get-active-zones public interfaces: em1 Find out the zone that an interface, for example em1, is currently assigned to: \u003e firewall-cmd --get-zone-of-interface=em1 public Find out all the interfaces assigned to a zone: \u003e firewall-cmd --zone=public --list-interfaces em1 wlan0 This information is obtained from NetworkManager and only shows interfaces, not connections. Find out all the settings of a zone: \u003e firewall-cmd --zone=public --list-all public interfaces: services: mdns dhcpv6-client ssh ports: forward-ports: icmp-blocks: source-quench View the list of services currently loaded: \u003e firewall-cmd --get-services cluster-suite pop3s bacula-client smtp ipp radius bacula ftp mdns samba dhcpv6-client dns openvpn imaps samba-client http https ntp vnc-server telnet libvirt ssh ipsec ipp-client amanda-client tftp-client nfs tftp libvirt-tls This includes all loaded predefined services and custom services. List all custom services, even not yet loaded: \u003e firewall-cmd --permanent --get-services ","date":"2022-07-16","objectID":"/firewalld-usage/:10:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#view-the-firewall-settings-using-cli"},{"categories":["操作系统"],"content":"Change the Firewall Settings Using CLI ","date":"2022-07-16","objectID":"/firewalld-usage/:11:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#change-the-firewall-settings-using-cli"},{"categories":["操作系统"],"content":"Drop All Packets (Panic Mode 恐慌模式) Start dropping all incoming and outgoing packets: \u003e firewall-cmd --panic-on Active connections will be terminated after a period of inactivity; the time taken depends on the individual session time out values. Disable panic mode: \u003e firewall-cmd --panic-off After disabling panic mode, established connections might work again if panic mode was enabled for a short period of time. Find out if panic mode is enabled or disabled: \u003e firewall-cmd --query-panic Prints yes with exit status 0, if enabled, prints no with exit status 1 otherwise. ","date":"2022-07-16","objectID":"/firewalld-usage/:11:1","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#drop-all-packets-panic-mode-恐慌模式"},{"categories":["操作系统"],"content":"Reload the Firewall Using CLI Reload the firewall with out interrupting user connections, that is to say, with out losing state info: \u003e firewall-cmd --reload Reload the firewall and interrupt user connections, that is to say, to discard state info: \u003e firewall-cmd --complete-reload This command should normally only be used in case of severe firewall problems. For example, if there are state info problems and no connection can be established but the firewall rules are correct. ","date":"2022-07-16","objectID":"/firewalld-usage/:11:2","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#reload-the-firewall-using-cli"},{"categories":["操作系统"],"content":"Add an Interface to a Zone Add an Interface to a Zone Using CLI: \u003e firewall-cmd --zone=public --add-interface=em1 To make this setting permanent, add the –permanent option and reload the firewall. Add an Interface to a Zone by Editing the Interface Configuration File (e.g. add em1 to the work zone): ZONE=work Note that if you omit the ZONE option, or use ZONE=, or ZONE='', then the default zone will be used. NetworkManager will automatically reconnect and the zone will be set accordingly. ","date":"2022-07-16","objectID":"/firewalld-usage/:11:3","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#add-an-interface-to-a-zone"},{"categories":["操作系统"],"content":"Get/Set the Default Zone Print default zone for connections and interfaces: \u003e firewall-cmd --get-default-zone Set the Default Zone by Using CLI(Command Line Interface): \u003e firewall-cmd --set-default-zone=public This change will take immediate effect and in this case it is not necessary to reload the firewall. Set the Default Zone by Editing the firewalld Configuration File: Edit /etc/firewalld/firewalld.conf as follows: # default zone # The default zone used if an empty zone string is used. # Default: public DefaultZone=home Reload the firewall \u003e firewall-cmd --reload This will reload the firewall without losing state information (TCP sessions will not be interrupted). ","date":"2022-07-16","objectID":"/firewalld-usage/:11:4","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#getset-the-default-zone"},{"categories":["操作系统"],"content":"Query/Open/Close Ports in the Firewall Using CLI List all open ports for a zone: \u003e firewall-cmd --zone=dmz --list-ports Note that this will not show ports opened as a result of the –add-services command. Query ports to check if they’re open: \u003e firewall-cmd --zone=public --query-port=5060-5061/udp yes Close ports: \u003e firewall-cmd --permanent --zone=public --remove-port=5060-5061/udp success Add a port to a zone (e.g. allow TCP traffic to port 8080 to the dmz zone): \u003e firewall-cmd --zone=dmz --add-port=8080/tcp To make this setting permanent, add the –permanent option and reload the firewall. Add a range of ports to a zone (e.g. allow the ports from 5060 to 5061 to the public zone): \u003e firewall-cmd --zone=public --add-port=5060-5061/udp ","date":"2022-07-16","objectID":"/firewalld-usage/:11:5","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#queryopenclose-ports-in-the-firewall-using-cli"},{"categories":["操作系统"],"content":"Add a Service to a Zone Add a service to a zone (e.g. allow SMTP to the work zone): \u003e firewall-cmd --zone=work --add-service=smtp Add a Service to a Zone by Editing XML Files, see How to using firewalls ","date":"2022-07-16","objectID":"/firewalld-usage/:11:6","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#add-a-service-to-a-zone"},{"categories":["操作系统"],"content":"Remove a Service from a Zone Remove a service from a zone(e.g. remove SMTP from the work zone): \u003e firewall-cmd --zone=work --remove-service=smtp Remove a Service from a Zone by Editing XML files, see How to using firewalls. ","date":"2022-07-16","objectID":"/firewalld-usage/:11:7","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#remove-a-service-from-a-zone"},{"categories":["操作系统"],"content":"Configure IP Address Masquerading Check if IP masquerading is enabled for the given zone: \u003e firewall-cmd --zone=external --query-masquerade Prints yes with exit status 0, if enabled, prints no with exit status 1 otherwise. If zone is omitted, the default zone will be used. Enable IP masquerading: \u003e firewall-cmd --zone=external --add-masquerade Disable IP masquerading: \u003e firewall-cmd --zone=external --remove-masquerade ","date":"2022-07-16","objectID":"/firewalld-usage/:11:8","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#configure-ip-address-masquerading"},{"categories":["操作系统"],"content":"Configure Port Forwarding Using CLI To forward inbound network packets from one port to an alternative port or address, first enable IP address masquerading for a zone. \u003e firewall-cmd --zone=external --add-masquerade To forward packets to a local port, that is to say to a port on the same system \u003e firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=3753 In this example, the packets intended for port 22 are now forwarded to port 3753. –add-forward-port=port=22 这部分貌似有问题，应该删掉一个\"port=\"，待求证！ To forward packets to another IPv4 address, usually an internal address, without changing the destination port. \u003e firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toaddr=192.0.2.55 In this example, the packets intended for port 22 are now forwarded to the same port at the address given with the toaddr. To forward packets to another port at another IPv4 address, usually an internal address. \u003e firewall-cmd --zone=external / --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.0.2.55 In this example, the packets intended for port 22 are now forwarded to port 2055 at the address given with the toaddr option. ","date":"2022-07-16","objectID":"/firewalld-usage/:11:9","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#configure-port-forwarding-using-cli"},{"categories":["操作系统"],"content":"Resources How to using firewalls fedora firewalld wiki 鸟哥的私房菜-防火墙的一般网络布线示意 ","date":"2022-07-16","objectID":"/firewalld-usage/:12:0","series":null,"tags":["linux","firewall"],"title":"Firewalld Usage","uri":"/firewalld-usage/#resources"},{"categories":["操作系统"],"content":"想起前同事有一天问我的一个问题，blocking|unblocking I/O 跟 sync|async I/O 有什么不同？ 前几天带着这个问题，读了《Unix Network Programming - Volume 1》。本文准备学以致用，把 Unix 系统上 5 种可用的 I/O 模型用自己的话讲清楚，并把前面这个问题给解答了。 正常情况下，一次在 socket 上进行的输入操作包含两个清楚的阶段： 等待数据在内核中就绪 等待数据到达网卡，当数据包到达时，它们被拷贝到内核中的缓冲区。 将数据从内核的缓冲区拷贝至应用的缓冲区中 Unix 提供了 5 种可用的 I/O 模型，它们的差异主要在与这两个阶段中应用跟内核之间的交互方式： blocking I/O nonblocking I/O I/O multiplexing (select and poll) signal driven I/O (SIGIO) asynchronous I/O (the POSIX aio_functions) ","date":"2021-12-11","objectID":"/unix-io-models/:0:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#"},{"categories":["操作系统"],"content":"Blocking I/O Model 最常见的是 blocking I/O model。默认情况下，所有的 socket 都是阻塞的（blocking）。下图以 UDP datagram socket 为例，描述这种模型的工作方式： 图 1 上图中发生两次上下文切换，应用调用 recvfrom 时从运行在应用中（running in the application）切换至运行在内核中（running in the kernel）。成功返回时，从内核切换回应用。 ","date":"2021-12-11","objectID":"/unix-io-models/:1:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#blocking-io-model"},{"categories":["操作系统"],"content":"Nonblocking I/O Model 当我们将 socket 设置为 nonblocking 时，我们正在告诉内核 “如果不让进程休眠，我请求的操作就无法完成，那就别让进程休眠，而是立即返回一个错误”。 图 2 前三次我们调用 recvfrom，都没有数据可返回，因此内核立即返回一个 EWOULDBLOCK 错误。第四次尝试时，一个数据报（datagram）就绪了，它被拷贝至应用缓冲区。在拷贝期间，应用进程一直阻塞。 应用在一个循环中在一个 nonblocking descriptor 上调用 recvfrom，这就是轮询（polling）。这往往会浪费 CPU 时间，还好偶尔会遇到这个模型，通常在专注于单一功能的系统上。 ","date":"2021-12-11","objectID":"/unix-io-models/:2:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#nonblocking-io-model"},{"categories":["操作系统"],"content":"I/O Multiplexing Model 对 I/O Multiplexing 来说，我们调用 select 或 poll 并阻塞在这两个系统调用之一上，而非阻塞在实际的 I/O 系统调用上。 图 3 跟 blocking model 比较，这个模型好像没有任何优势，反而还有轻微的劣势，因为它有两次系统调用，而非一次。但它的优势在于，我们一次可以等待多个描述符就绪（ready）。 另一个紧密相关的 I/O 模型是将多线程跟 blocking I/O 一起使用。该模型非常像 multiplexing model，除了它不是阻塞在多个文件描述符上，而是使用多个线程（每个文件描述符一个）自由地调用像 recvfrom 这样的阻塞系统调用（blocking system call）。 ","date":"2021-12-11","objectID":"/unix-io-models/:3:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#io-multiplexing-model"},{"categories":["操作系统"],"content":"Signal-Driven Model 我们也可以告诉内核，当描述符就绪的时候，请它使用 SIGIO 信号通知我们。 图 4 为了启用 signal-driven I/O，我们先对 socket 做一些设置。然后使用 sigaction 系统调用安装一个信号处理器。安装完信号处理器后，进程就继续去做其他事情了，无需阻塞等待数据报（datagram）达到。当信号处理器收到信号时，要么它先调用 recvfrom 将数据报读到应用缓冲区再通知 main loop 数据报可处理了，要么它通知 main loop 数据报可读取了并让 main loop 来读取数据。 ","date":"2021-12-11","objectID":"/unix-io-models/:4:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#signal-driven-model"},{"categories":["操作系统"],"content":"Async I/O Model asynchronous I/O 由 POSIX 规范定义。async func 告诉内核，开始期望的操作并在整个操作完成（包括将数据报从内核拷贝至应用缓冲区）时通知我们。这个模型跟前一节描述的信号驱动的模型之间主要的不同之处在于，使用信号驱动，当一个 I/O 操作可以启动（can be initiated）时内核就通知我们；而使用 async I/O，当一个 I/O 操作完成时内核才通知我们。 图 4 我们调用 aio_read 函数（POSIX 异步 I/O 函数的名称以 aio_ 或 lio 开始），并将 descriptor、buffer pointer、buffer size、file offset (类似于 lseek)、当整个操作完成时如何通知我们 这 5 个参数传给内核。 ","date":"2021-12-11","objectID":"/unix-io-models/:5:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#async-io-model"},{"categories":["操作系统"],"content":"I/O 模型之间的比较 前 4 个模型之间的主要不同在第一阶段，因为它们的第二阶段是相同的：在将数据从内核拷贝至应用缓冲区期间进程阻塞在 recvfrom 系统调用上。然而，async I/O 跟前 4 个不同，一次异步函数调用处理这两个阶段，在此期间进程继续处理其他事情。 图 5 ","date":"2021-12-11","objectID":"/unix-io-models/:6:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#io-模型之间的比较"},{"categories":["操作系统"],"content":"Sync I/O vs Async I/O POSIX 定义了如下两个术语： 一个 sync I/O 操作会导致请求进程阻塞，直到 I/O 操作完成。 一个 async I/O 操作不会导致请求进程阻塞。 根据这个定义，前 4 个模型都是同步的，因为使用它们时 实际的 I/O 操作（recvfrom） 都会阻塞进程。只有 async I/O 模型满足 async I/O 的定义。 注意 sync 和 async I/O 并不是具体的 I/O model，只是根据 请求进程是否被阻塞直到 I/O 操作完成 这一点对 I/O model 的分类而已。因此它们不像 I/O model 那样描述 I/O 操作的具体工作方式。 注意 本文多次提及 I/O 操作 这个概念。在大多数 I/O model 中，应用执行的操作不止一个，到底哪个操作是 I/O 操作呢？UNP-Vol1, I/O Models 章节中对比 sync 和 async I/O 时，有这么一句话： Using these definitions, the first four I/O models—blocking, nonblocking, I/O multiplexing, and signal-driven I/O—are all synchronous because the actual I/O operation (recvfrom) blocks the process. 根据粗体部分可知，I/O 操作指的是 recvfrom。虽然在不同的 I/O model 中，recvfrom 做得事情可能不同，但都包括将数据从内核空间拷贝至应用空间。从应用的角度看，I/O 操作应该是指应用接收来自内核的数据，换句话说，就是将数据从内核空间拷贝至应用空间。 ","date":"2021-12-11","objectID":"/unix-io-models/:7:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#sync-io-vs-async-io"},{"categories":["操作系统"],"content":"常见问题与错误理解 blocking/non-blocking I/O 与 sync/async I/O 之间有什么区别？ 我们先看问题本身，blocking/non-blocking I/O 是具体的 I/O model。但如果 sync/async I/O 指的是 I/O model，那么问题描述本身就有错误，因为没有一个具体的 I/O model 叫 sync I/O；如果指的是上一节中讲述的对 I/O model 的分类，也需要对问题描述做些调整，以便说清楚要对比的两个具体对象。 有人认为，I/O 有阻塞/非阻塞、同步/异步这分，这两个维度是正交的，两两组合就得到四种 I/O model。 这个理解错在，这两个维度并非是正交的，因此不能两两组合。根据上一节内容可知，sync I/O 这个分类包含了所有在 I/O 操作完成前会阻塞请求进程的 I/O model，因此这两个维度不是正交的。 ","date":"2021-12-11","objectID":"/unix-io-models/:8:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#常见问题与错误理解"},{"categories":["操作系统"],"content":"参考资料 UNP-Vol1, I/O Models: UNIX Network Programming Volume 1, Third Edition “6.2 I/O Models” ","date":"2021-12-11","objectID":"/unix-io-models/:9:0","series":null,"tags":["IO"],"title":"Unix IO models","uri":"/unix-io-models/#参考资料"},{"categories":["编程笔记"],"content":"最近开始尝试使用 Gradle 构建项目，踩了一些坑，简略记录以备忘。 Gradle 项目可以使用 Gradle Wrapper (简称 Wrapper)，也可以不使用。Wrapper 的主要目的是将项目构建依赖的 Gradle 版本配置化，作为构建脚本的一部分。Wrapper 只是一个脚本，它调用指定版本的 Gradle；如果指定版本的 Gradle 不存在，就下载并自动安装，避免开发者手动安装。官方推荐使用 Wrapper 执行任何 Gradle build。可是墙内下载 Gradle 非常慢，一开始还不知道为啥必须下载，如何加速，这让人很懊恼。如何使用 Wrapper，请看 The Gradle Wrapper。 解决办法有两个，但都需要先手工把对应版本下载到本地。 办法一： 部署 HTTP Server (如 Nginx)，把下载的文件放入站点目录。 修改 {Gradle Project}/gradle/wrapper/gradle-wrapper.properties 文件，将 distributionUrl 设置为本地或内网的可用下载地址。 distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists #distributionUrl=https\\://services.gradle.org/distributions/gradle-6.6.1-bin.zip distributionUrl=http\\://localhost:8080/gradle-6.6.1-bin.zip zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists 注意，对于 properties 文件，name/value 的分隔符是 ‘=’ 或 ‘:'，所以如果 value 中包含这两个字符，记得用 \\ 进行转义。 办法二： 把下载文件放到本地某个目录，例如：/Users/{user}/Cellar/gradle-6.6.1-bin.zip 修改 {Gradle Project}/gradle/wrapper/gradle-wrapper.properties 文件，将 distributionUrl 设置为本地文件路径： distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists #distributionUrl=https\\://services.gradle.org/distributions/gradle-6.6.1-bin.zip distributionUrl=file\\:///Users/xxx/Cellar/gradle-6.6.1-bin.zip zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists 最后，在项目根目录运行命令 ./gradlew build 检查效果如何。 ","date":"2020-12-16","objectID":"/gradle-%E9%87%87%E5%9D%91%E8%AE%B0/:0:0","series":["Gradle使用"],"tags":["java"],"title":"Gradle 采坑记","uri":"/gradle-%E9%87%87%E5%9D%91%E8%AE%B0/#"},{"categories":null,"content":"还不知道该说些什么 ","date":"0001-01-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"","uri":"/about/#"}]